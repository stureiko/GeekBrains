import heapq  # очередь с приоритетом
from collections import Counter  # словарь со счетчиком
from collections import namedtuple


class Node(namedtuple("Node", ["left", "right"])):  # класс для ветвей дерева - внутренних узлов; у них есть потомки
    def walk(self, code, acc):
        # чтобы обойти дерево нам нужно:
        self.left.walk(code, acc + "0")  # пойти в левого потомка, добавив к префиксу "0"
        self.right.walk(code, acc + "1")  # затем пойти в правого потомка, добавив к префиксу "1"


class Leaf(namedtuple("Leaf", ["char"])):
    # класс для листьев дерева, у него нет потомков, но есть значение символа
    def walk(self, code, acc):
        # потомков у листа нет, по этому для значения мы запишем построенный код для данного символа
        # если строка длиной 1 то acc = "", для этого случая установим значение acc = "0"
        code[self.char] = acc or "0"


def huffman_encode(s: str) -> {}:  # функция кодирования строки в коды Хаффмана
    h = []  # инициализируем очередь с приоритетами

    # постоим очередь с помощью цикла, добавив счетчик, уникальный для всех листьев
    # очередь будет представлена частотой символа, счетчиком и самим символом
    for ch, freq in Counter(s).items():
        h.append((freq, len(h), Leaf(ch)))

    heapq.heapify(h)  # построим очередь с приоритетами

    count = len(h)  # инициализируем значение счетчика длиной очереди

    while len(h) > 1:  # пока в очереди есть хотя бы 2 элемента
        freq1, _count1, left = heapq.heappop(h)  # вытащим элемент с минимальной частотой - левый узел
        freq2, _count2, right = heapq.heappop(h)  # вытащим следующий элемент с минимальной частотой - правый узел

        # поместим в очередь новый элемент, у которого частота равна суме частот вытащенных элементов
        # добавим новый внутренний узел у которого
        # потомки left и right соответственно
        heapq.heappush(h, (freq1 + freq2, count, Node(left, right)))

        count += 1  # увеличиваем значение счетчика при добавлении нового элемента дерева

    code = {}  # инициализируем словарь кодов символов

    if h:  # если строка пустая, то очередь будет пустая и обходить нечего
        # в очереди 1 элемент, приоритет которого не важен, а сам элемент - корень дерева
        [(_freq, _count, root)] = h

        root.walk(code, "")  # обойдем дерева от корня и заполним словарь для получения кодирования Хаффмана

    return code  # возвращаем словарь символов и соответствующих им кодов


# функция декодирования исходной строки по кодам Хаффмана
def huffman_decode(encoded: str, code: {}) -> str:

    sx =[]  # инициализируем массив символов раскодированной строки

    enc_ch = ""  # инициализируем значение закодированного символа

    for ch in encoded:  # обойдем закодированную строку по символам

        enc_ch += ch  # добавим текущий символ к строке закодированного символа

        for dec_ch in code:  # постараемся найти закодированный символ в словаре кодов

            if code.get(dec_ch) == enc_ch:  # если закодированный символ найден,
                # добавим значение раскодированного символа к массиву раскодированной строки
                sx.append(dec_ch)
                enc_ch = ""  # обнулим значение закодированного символа

                break
    return "".join(sx)  # вернем значение раскодированной строки


if __name__ == '__main__':
    s = input('Введите строку для кодирования: ')  # читаем строку от пользователя

    code = huffman_encode(s)  # кодируем строку

    # отобразим закодированную версию, отобразив каждый символ
    # в соответствующий код и конкатенируем результат
    encoded = "".join(code[ch] for ch in s)

    print(
        f'Длина строки уникальных символов: {len(code)},\nДлина закодированной строки: {len(encoded)}\n')  # выведем число символов и длину закодированной строки

    print('Кодировка символов:')
    for ch in sorted(code):  # обойдем символы в словаре в алфавитном порядке с помощью функции sorted()
        print("\"{}\": {}".format(ch, code[ch]))  # выведем символ и соответствующий ему код
    print(f'Закодированная строка: \"{encoded}\"')  # выведем закодированную строку

    print('\nРаскодируем строку:')
    print(f'\"{huffman_decode(encoded, code)}\"')
